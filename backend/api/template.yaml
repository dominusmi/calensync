AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Env:
    Type: String
  CalensyncLayer:
    Type: String
  Frontend:
    Type: String

Globals:
  Function:
    CodeUri: src/
    Timeout: 10
    MemorySize: 512
    Runtime: python3.8
    Layers:
      - !Ref CalensyncLayer
    Environment:
      Variables:
        ENV: !Ref Env
        FRONTEND: !Ref Frontend
    Policies:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - !Ref RdsPolicy

  Api:
    OpenApiVersion: '3.0.1'
    Cors:
      AllowMethods: "'POST, GET, PUT, DELETE'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      AllowCredentials: true

  HttpApi:
    CorsConfiguration:
      AllowHeaders:
        - "*"
      AllowMethods:
        - "*"
      AllowOrigins:
        - "*"
      MaxAge: 300

Resources:
  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Env
      DefaultRouteSettings:
        ThrottlingBurstLimit: 5

  RdsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Gives access to RDS secrets"
      ManagedPolicyName: !Sub "Calensync-GetRDSSecret-${ENV}"
      Path: /LambdaPolicies/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Ref calensync-${ENV}/db

  PrepareGoogleSSO:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-PrepareGoogleSSO-${ENV}"
      Handler: endpoints.get__prepare_google_sso_oauth
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref RdsPolicy
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /google/sso/prepare
            Method: get

  PrepareGoogleCalendarOAuth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-PrepareGoogleCalendarOAuth-${ENV}"
      Handler: endpoints.get__prepare_google_calendar_oauth
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref RdsPolicy
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /google/calendar/prepare
            Method: get

  ReceiveOauth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-ReceiveOauth-${ENV}"
      Handler: endpoints.get__oauth2
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref RdsPolicy
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /oauth2
            Method: get

  GetCalendarAccounts:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-GetCalendarAccounts-${ENV}"
      Handler: endpoints.get__calendar_accounts
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /accounts
            Method: get

  GetCalendars:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-GetCalendars-${ENV}"
      Handler: endpoints.get__calendars
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /accounts/{account_id}/calendars
            Method: get

  RefreshCalendars:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-RefreshCalendars-${ENV}"
      Handler: endpoints.post__refresh_calendars
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /accounts/{account_id}/calendars/refresh
            Method: post

  GetCalendar:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-GetCalendar-${ENV}"
      Handler: endpoints.get__calendar
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /calendars/{calendar_id}
            Method: get


  PatchCalendar:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-PatchCalendar-${ENV}"
      Handler: endpoints.patch__calendar
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /calendars/{calendar_id}
            Method: patch

  GoogleWebhook:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-ReceiveOauth-${ENV}"
      Handler: endpoints.post__webhook
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /webhook
            Method: post

  PostObtainJWT:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "calensync-PostJWT-${ENV}"
      Handler: endpoints.post__obtain_jwt
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /jwt
            Method: post

  WhoAmI:
    Type: AWS::Serverless::Function
    Properties:
      Handler: endpoints.whoami
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            PayloadFormatVersion: "2.0"
            Path: /whoami
            Method: get