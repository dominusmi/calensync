name: CI

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - 'dev'
  workflow_dispatch:
    inputs:
      env:
        type: string
        description: Environment
        required: true
        options:
          - dev
          - prod

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: yoda
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Set environment variable based on branch name
        run: |
          if [[ "${{ github.ref_name }}" == "master" || "${{ github.event.inputs.env }}" == "prod" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "dev" || "${{ github.event.inputs.env }}" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
          fi
          echo "Environment is ${{env.ENV}}"

      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: backend/lib/requirements.txt

      - name: Install dependencies
        working-directory: backend/lib
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install pytest

      - name: Run pytest
        working-directory: backend/lib
        run: |
          pytest

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm install
          npm run build-blog
          npm run build:${{env.ENV}}

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    needs: test
    if: ( github.ref == 'refs/heads/dev' && github.event_name != 'pull_request') ||
      ( github.event.inputs.env != '' ) || ( github.ref == 'refs/heads/master' )
    steps:
      - name: Set environment variable based on branch name
        run: |
          if [[ "${{ github.ref_name }}" == "master" || "${{ github.event.inputs.env }}" == "prod" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "dev" || "${{ github.event.inputs.env }}" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          fi
          echo "Environment is ${{env.ENV}}"

      - uses: aws-actions/setup-sam@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CLOUDFORMATION_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CLOUDFORMATION_SECRET_KEY }}
          aws-region: eu-north-1

      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

#       Allows to run build and deployment only if backend/frontend files were changed
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - '.github/**'
              - 'backend/**'
              - 'samconfig.toml'
              - 'template.yaml'
            frontend:
              - '.github/**'
              - 'frontend/**'
              - 'samconfig.toml'
              - 'template.yaml'

      - name: Modified directories
        run: |
          echo "Backend: ${{ steps.filter.outputs.backend }}"
          echo "Frontend: ${{ steps.filter.outputs.frontend }}"

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install and build frontend
        working-directory: frontend
        if: steps.filter.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          npm install
          npm run build-blog
          npm run build:${{env.ENV}}

      - name: Build layer
        if: steps.filter.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
        working-directory: backend
        run: |
          python scripts/build_layer.py

      - name: Deploy Backend
        working-directory: backend
        if: steps.filter.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
        env:
          PARAMETERS_DEV: ${{secrets.AWS_PARAMETER_OVERRIDE_DEV}}
          PARAMETERS_PROD: ${{secrets.AWS_PARAMETER_OVERRIDE_PROD}}
        run: |
          if [[ "${{ env.ENV }}" == 'dev' ]]; then
            sam deploy --config-env ${{env.ENV}} --config-file samconfig-ci.toml --parameter-overrides ${{env.PARAMETERS_DEV}}
          elif [[ "${{ env.ENV }}" == 'prod' ]]; then
            sam deploy --config-env ${{env.ENV}} --config-file samconfig-ci.toml --parameter-overrides ${{env.PARAMETERS_PROD}}
          fi

      - name: Deploy Frontend
        working-directory: frontend
        if: steps.filter.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          npm run deploy-ci:${{env.ENV}}
